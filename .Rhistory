install.packages(c("htmltools", "installr", "rsconnect"))
install.packages(c("htmltools", "installr", "rsconnect"))
install.packages(c("htmltools", "installr", "rsconnect"))
data ("iris")
library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, color=Species, data=training)
q()
library(swirl)
swirl()
swirl()
swirl()
0
info()
main()
bye()
cat kibble
library(pryr)
install.packages(pryr)
ftype(mean)
install.packages("pryr")
library(pryr)
ftype(mean)
ftype(lm)
showMethods("show")
getMethod(show)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(pgmm)
install.packages("pgmm")
library(pgmm)
library(rpart)
data(segmentationOriginal)
data <- segmentationOriginal
dim(data)
summary(data)
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
install.packages("e1071")
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
data(olive)
olive = olive[,-1]
dim(olive)
head(olive)
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata) # 2.875
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
logitModel
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSA$chd, predictTest)
data(vowel.train)
data(vowel.test)
dim(vowel.train) # 528  11
dim(vowel.test) # 462  11
head(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("randomForest")
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library("randomForest")
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
package:stats
library(gbm)
install.packages("gbm")
library(gbm)
library(lubridate)
install.packages("lubridate")
library(lubridate)
install.packages("forecast")
library(lubridate)
library(e1071)
install.packages(c("car", "Rcpp", "swirl"))
install.packages(c("car", "Rcpp", "swirl"))
library(swirl)
swirl()
swirl()
swirl()
q()
-code--code-library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
-/code--/code-
library(ElemStatLearn)
library(caret)
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
library(ggplot2)
library(caret)
-code--code-library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
-/code--/code-
set.seed(33833)
# fit rf predictor relating the factor variable y
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
predRf <- predict(fitRf, vowel.test)
predGBM <- predict(fitGBM, vowel.test)
# RF Accuracy: 0.6060606
confusionMatrix(predRf, vowel.test$y)$overall[1]
# GBM Accuracy: 0.530303
confusionMatrix(predGBM, vowel.test$y)$overall[1]
pred <- data.frame(predRf, predGBM, y=vowel.test$y, agree=predRf == predGBM)
head(pred)
accuracy <- sum(predRf[pred$agree] == pred$y[pred$agree]) / sum(pred$agree)
accuracy # Agreement Accuracy: 0.6569579
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
predRf <- predict(fitRf, vowel.test)
predGBM <- predict(fitGBM, vowel.test)
confusionMatrix(predRf, vowel.test$y)$overall[1]
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(gbm)
library(lubridate)  # For year() function below
library(forecast)
library(plyr)
library(lubridate)  # For year() function below
library(forecast)
getwd()
dat <- read.csv("./gaData.csv")
training <- dat[year(dat$date) < 2012, ]
testing <- dat[(year(dat$date)) > 2011, ]
tstrain <- ts(training$visitsTumblr)
fit <- bats(tstrain)
fit
pred <- forecast(fit, level=95, h=dim(testing)[1])
names(data.frame(pred))
predComb <- cbind(testing, data.frame(pred))
names(testing)
names(predComb)
predComb$in95 <- (predComb$Lo.95 < predComb$visitsTumblr) &
(predComb$visitsTumblr < predComb$Hi.95)
# How many of the testing points is the true value within the
# 95% prediction interval bounds?
prop.table(table(predComb$in95))[2] # 0.9617021
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(325)
fit <- svm(CompressiveStrength ~., data=training)
# OR another way
# fit <- train(CompressiveStrength ~. data=training, method="svmRadial")
pred <- predict(fit, testing)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
acc[2] # RMSE 6.715009
library(shiny)
setwd("C:/Learning/GIT/DevelopingDataProducts")
library(rsconnect)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
rsconnect::setAccountInfo(name='samsulmohd',
token='DDAB21877A5BAF90483B597AFD375882',
secret='u/cBRwfCtthGNTU5vbSrgvHKk3DRFoBRTNQOo8jE')
library(shinyapps)
library(slidify)
rsconnect::setAccountInfo(name='samsulmohd',
token='DDAB21877A5BAF90483B597AFD375882',
secret='u/cBRwfCtthGNTU5vbSrgvHKk3DRFoBRTNQOo8jE')
